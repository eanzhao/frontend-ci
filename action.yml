name: Build and Test

description: 'Run tests, generate tests badges'

inputs:
  commit-token:
    description: 'GitHub token'
    required: true
  branch-name:
    description: 'Branch to store test results'
    required: true

permissions:
  contents: write
  actions: read

runs:
  using: 'composite'
  steps:
    - name: Checkout
      uses: actions/checkout@v4

    - uses: actions/setup-node@v2
      with:
        node-version: 20
        cache: yarn

    - run: yarn install
      shell: bash

    - run: yarn run test
      shell: bash

    - name: Install xmlstarlet
      run: |
        sudo apt-get update
        sudo apt-get install -y xmlstarlet
      shell: bash

    - name: Extract test counts
      run: |
        echo "TESTS=$(xmlstarlet sel -t -v "testsuites/@tests" "jest-report.xml")" >> $GITHUB_ENV
        echo "FAILURES=$(xmlstarlet sel -t -v "testsuites/@failures" "jest-report.xml")" >> $GITHUB_ENV
        echo "ERRORS=$(xmlstarlet sel -t -v "testsuites/@errors" "jest-report.xml")" >> $GITHUB_ENV
      shell: bash

    - name: Set file name
      run: echo "FILENAME=$(echo ${GITHUB_REF#refs/heads/} | tr '/' '-')-test-results.json" >> $GITHUB_ENV
      shell: bash

    - name: Prepare Content
      uses: actions/github-script@v5
      with:
        github-token: ${{ inputs.commit-token }}
        script: |
          const fs = require('fs');
          const tests = "${{ env.TESTS }}";
          const failures = "${{ env.FAILURES }}";
          const errors = "${{ env.ERRORS }}";
          const color = errors > 0 ? "red" : (failures > 0 ? "green" : "brightgreen");
          const content = `{"schemaVersion":1,"label":"tests","message":"${tests} tests, ${failures} failures, ${errors} errors","color":"${color}"}`;

          fs.writeFileSync("${{ env.FILENAME }}", content);

    - name: Check if file exists
      uses: actions/github-script@v5
      with:
        github-token: ${{ inputs.commit-token }}
        script: |
          let fileExists = false;
          try {
            const { data } = await github.rest.repos.getContent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: "${{ env.FILENAME }}",
              ref: "${{ inputs.branch-name }}",
            });
            fileExists = !!data;
          } catch (error) {
            if (error.status !== 404) {
              throw error;
            }
          }
          core.exportVariable('FILE_EXISTS', fileExists);

    - name: Create or update file
      uses: actions/github-script@v5
      with:
        github-token: ${{ inputs.commit-token }}
        script: |
          const fs = require('fs');
          const path = require('path');
          const filePath = path.join(process.env.GITHUB_WORKSPACE, "${{ env.FILENAME }}");
          const fileContent = fs.readFileSync(filePath, 'utf8');

          const params = {
            owner: context.repo.owner,
            repo: context.repo.repo,
            path: "${{ env.FILENAME }}",
            message: `Update ${{ env.FILENAME }}`,
            content: Buffer.from(fileContent).toString('base64'),
            branch: "${{ inputs.branch-name }}"
          };

          if (${{ env.FILE_EXISTS }}) {
            const { data } = await github.rest.repos.getContent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: "${{ env.FILENAME }}",
              ref: "${{ inputs.branch-name }}"
            });
            params.sha = data.sha;
          }

          await github.rest.repos.createOrUpdateFileContents(params);

